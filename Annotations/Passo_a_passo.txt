Aqui será mostrado o passo a passo da criação do projeto.


1 - Iniciar o projeto utilizando Spring Initializr com todas as dependências listadas no POM.




2 - Criar a model:
    A model Pagamento foi criada, e a mesma se conectará ao banco. O plugin Lombok ajudou a deixar a classe enxuta, criando
    automaticamente getters, setters e construtores. Diversas validações também foram postas a todos os atributos, sempre
    em forma de annotations.




3 - Criar o repository:
    O repository é um pacote que guarda as interfaces da model, no caso do projeto há a PagamentoRepository. Ela tem como
    finalidade herdar a JpaRepository, que fará todos os métodos para um CRUD básico. Nos parâmetros são passadas a classe
    model que receberá os atributos e o tipo da chave primária.




4 - Criar a DTO da model:
    Há um arquivo de texto mais específico para a DTO, mas basicamente são versões simplificadas da model, com apenas os
    atributos e os métodos get e set. Elas são especialmente úteis por serem mais leves, e podem esconder detalhes que devem
    permanecer ocultos no sistema, protegendo a integridade do sistema. Caso algum atributo da model deva permanecer escondido,
    basta não declará-lo na DTO.




5 - Criar a camada Service:
    Dado que estamos construindo um microsserviço já considerando todas as boas práticas, não vamos incluir no nosso
    controlador ou controller a regra de manipulação ao repositório, precisamos extrair isso para uma camada a parte que
     chamamos, geralmente, de service.

    Isso é feito porque o objetivo do controlador é receber uma requisição, delegar para alguém e só devolver a resposta,
     não é para ele ter muitas coisas acontecendo ali, o ideal é que ele seja enxuto.

    Então vamos criar um pacote de serviço e incluir os serviços básicos que vamos precisar, que é o de criar um
    pagamento, atualizar, obter a lista de pagamentos.




6 - Criar a controller:
    A controller serve para mapear as requisições de diferentes tipos para as URL's corretas. Ela instancia a classe service,
    onde estão todas as regras de manipulação do repositório.





7 - Criar as migrations:
    Em microsserviços há mais do que um banco de dados, em unidades independentes. O conceito de migrations é fazer esse
    controle de como as bases de dados irão evoluir, guardar históricos, fazer reverts voltando para um estado anterior e
    aplicar as alterações para todos os microsserviços.
    A dependência Flyway cuida das migrations na aplicação. Quando o projeto é iniciado já com o Flyway como dependência,
    na pasta resource é criado uma pasta db.migration. Dentro dessa pasta irão os arquivos SQL.
    O padrão de nomes para os arquivos sql é "V{numero}__{nome do comando}.sql".
    Exemplo: V1__criar_tabela_pagamentos.sql
    Dentro dela irão os comandos SQL para criar a tabela, e assim que o projeto rodar, esses comandos serão executados.





8 - Realizar as configurações para conectar com o banco de dados:
    Nesse passo, é necessário adicionar ao application.properties as configurações do banco SQL.
    Lá serão definidas algumas configurações, como a classe MySQL usada pelo JDBC, a url do banco de dados que queremos
    criar, além do nome e senha do usuário.
    Por último, uma configuração para mostrar no log quais comandos SQL estão sendo rodados, assim que o projeto é iniciado.
    A tabela será criada no MySQL, mas um ponto de atenção é que ele cria 2 tabelas. A tabela escolhida e definida na migration,
    e uma tabela chamada "flyway_schema_history". Essa tabela mostrará o histórico de scripts rodados, qual seu nome, data
    de inserção e por quem foi feito. A partir dessa tabela ele sabe quais migrations já foram executadas, para não
    executar novamente (tipo um data_patch).




9 - Declarar os beans do ModelMapper:
    Quando você usa a anotação @Autowired em um objeto no Spring, está indicando ao contêiner do Spring que ele deve
    injetar automaticamente uma instância desse objeto. No entanto, se não houver um bean correspondente configurado no
    contêiner do Spring, ocorrerá um erro.

    A razão pela qual isso acontece é que o Spring precisa saber qual bean deve ser injetado em um determinado ponto de
    injeção. Ele faz isso por meio de um processo chamado resolução de dependência. Quando você declara um objeto com
    @Autowired, o contêiner do Spring verifica se existe um bean correspondente que pode ser injetado nesse ponto.
    Se o bean não for encontrado, o contêiner não tem como saber qual objeto deve ser injetado e, portanto, ocorre um erro.

    Uma pasta chamada config foi criada, e nela foi posta a classe Configuracao, que servirá para quaisquer configurações
    de Bean; Há outras possibilidades, como criar em um arquivo xml.




10 - Testar a aplicação e criar as requisições no postman:
    As requisições estão no Postman, coleção "Alura Food". As requisições GET, POST, PUT e DELETE foram criadas.
    O CRUD funciona perfeitamente.
    Caso nos métodos que exijam um JSON, não seja informado algum campo, ocorrerá um erro. Isso acontece porque tanto os atributos
    da DTO quanto as tabelas do campo são NOT NULL. Ou seja, no presente momento o cliente é OBRIGADO a utilizar um cartão de crédito
    para comprar. Caso queira implementar outros métodos, essa alteração precisa ser feita.
    Obs: Caso haja algum erro e apareça uma mensagem de erro gigante, é porque não há handlers no projeto nesse ponto.
    Handlers são classes utilizadas para manipular mensagens de erro.



11 - Habilitar o projeto como Eureka Client:
    Na classe principal PagamentosApplication, é necessário aplicar a anotação @EnableEurekaClient. Essa anotação serve
    para a IDE identificar que é um cliente e vai se registrar em algum Eureka.
    Em seguida, também é necessário configurar o application.properties, definindo o nome do microsserviço pagamento e
    qual url na qual o Eureka está recebendo as requisições:
        spring.application.name=pagamentos-ms
        eureka.client.serviceUrl.defaultZone=http://localhost:8081/eureka

    Por fim, vamos deixar que o Eureka controle em qual porta que ele vai subir o serviço. Para não nos preocuparmos
    mais com isso, visto que teremos um catálogo e chamaremos os serviços pelo nome. Para isso, usaremos o atributo
    server.port=0.

    Subindo a aplicação, já é possível identificar na url do Eureka o microsserviço de pagamento rodando. Nota-se que a ele
    foi atribuída uma URL que deverá ser usada inclusive para fazer as novas requisições.




12 - Criar o próximo Microsserviço - Pedidos:
    Um novo projeto foi criado, para comandar todos os pedidos. Esse projeto também receberá as configurações do Eureka
    e subirá exatamente como o de pagamentos.




13 - Configurar o gateway:
    O gateway é importante pois sem ele devemos sempre listar em qual endereço cada um dos microsserviços está, sempre de maneira
    manual. Com um gateway, esse endereçamento é feito automaticamente e nas requisições deve ser passado apenas o
    endereço do gateway.
    Um projeto spring para o gateway foi configurado da mesma maneira que o server, apontado para a porta 8082 e em seguida
    ele subiu como um cliente Eureka.
    Após ele ter subido, a maneira de fazer as requisições muda.
    A partir de agora, apontaremos o endereço localhost com a porta do GATEWAY, em seguida mencionando o microsserviço
    como está no eureka, e em seguida a URL da controller.
    Ex: http://localhost:8082/pedidos-ms/pedidos
    Note que não é mais endereçar manualmente as url's passadas pelo Eureka.
    Obs: O gateway em Spring também atua como LoadBalancer.




14 - Configurar o LoadBalancer:
    Um dos motivadores para decompor uma aplicação em microsserviços é poder fazer a escalabilidade horizontal apenas
    de uma determinada parte da aplicação. Por exemplo, a black friday que queremos escalar somente o microsserviço de
    pedidos, visto que estamos esperando o aumento das requisições.

    É comum fazermos isso e subirmos várias instâncias daquele mesmo serviço, que é o que chamamos escalabilidade
    horizontal. Para fazermos isso, o gateway do Spring faz esse papel também, esse Server Load Balancing (ou em
    português, balanceamento de carga).

    Podemos subir várias instâncias de um serviço e a cada requisição ele vai direcionar efetuando um balanceamento
    dessa carga.

    Vamos ter que identificar as instâncias por algum identificador único, para conseguirmos subir mais de uma
    instância e ele detectar que isso está acontecendo. Tem uma propriedade do Spring que podemos incluir no
    application.properties do microsserviço de pedidos, que é o ID da instância.

    Para definirmos o identificador único de uma instância, vamos inserir como variáveis de ambiente o nome da
    aplicação,spring.application.name, e em seguida, solicitaremos para gerar um valor aleatório inteiro, random.int.

    eureka.instance.instance-id=${spring.application.name}:${random.int}

    Ao subir a instância ele vai identificar pelo nome "pedidos-ms" e vai gerar um número aleatório. Para conferirmos
    se ele está distribuindo as requisições, incluiremos um método no controlador, em "src > main > java > controller",
    no arquivo PedidoController.

    O método vai ser o @GetMapping("/porta"), logo, quando fazermos a requisição e colocarmos "/pedidos/porta" ele
    devolve em qual porta está rodando essa instância. O método vai retornar uma string, com uma anotação @Value para
    ele atribuir o valor que passarmos na porta para a variável porta.

    Dentro dos parênteses passaremos a variável de ambiente, ("${local.server.port}") para uma variável chamada
    "String porta". Agora vamos retornar uma mensagem informando em qual porta está rodando essa instância, com
    return String.format.

    Em seguida, identificar por essa variável local.server.port qual a porta que está rodando o serviço que foi chamado.


    Uma nova requisição foi feita em pedidos, para mostrar a porta que o loadBalancer está jogando.




15 - Realizar a configuração Síncrona utilizando Spring Feign:
    O Open Feign do Spring Cloud é utilizado para conseguir projetar a comunicação síncrona entre microsserviços.
    Para isso é necessário adicionar a dependência correta no POM e uma anotação na classe principal "@EnableFeignClients".
    Nesse projeto, temos um microsserviço de pedido e um de pagamento. Quando o pagamento for confirmado, precisamos enviar
    uma mensagem para o microsserviço de pedido indicando que está pago. Para fazer isso, no microsserviço de pedido
    precisamos de um método no controlador que receba essa requisição.



16 - Implementar Circuit Breaker:
    O circuit breaker interrompe o chamado a um serviço quando as requisições com falha de comunicação atingirem um número
    específico.




17 - Definir um Fallback:
    O fallback é um "plano B", a forma que o microsserviço tratará a falha de comunicação, ou seja, é uma estratégia
    para que a inoperabilidade de um serviço não afete o outro.

